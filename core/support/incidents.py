from typing import Optional

from django.conf import settings
from django.utils import timezone
from django.contrib.auth import get_user_model

from suitedconnectors.tasks import (
    track_analytics_event, send_support_email, message_to_zulip_support,
    send_support_email_reply
)
from poker.models import PokerTable

from .models import SupportTicket, TicketSource
from .artifacts import (
    save_settings_info,
    save_traceback,
    save_user_info,
    save_table_info,
    save_notes,
    save_tablebeat_info,
    save_botbeat_info,
    save_frontend_log,
    save_hand_history,
    save_socket_log,
    save_tablebeat_log,
    save_botbeat_log,
    save_communication_log,
    logger,
    read_notes,
)


User = get_user_model()

### Ticket creation helpers

def ticket_from_tablebeat_exception(table: PokerTable,
                                    exc: Exception,
                                    tb: str=None,
                                    tablebeat_info: dict=None) -> SupportTicket:

    ticket = SupportTicket.objects.create(
        subject = f'Tablebeat exception: {exc.__class__.__name__}: {exc}'[:255],
        source = TicketSource.TABLEBEAT_EXC,
        table = table,
    )

    save_settings_info(ticket)
    save_traceback(ticket, exc, tb)
    save_tablebeat_info(ticket, tablebeat_info)
    save_table_info(ticket, table)
    save_hand_history(ticket, table)
    save_socket_log(ticket, table.path)
    save_tablebeat_log(ticket, table)

    report_ticket(ticket)
    return ticket


def ticket_from_botbeat_exception(table: Optional[PokerTable],
                                  exc: Exception,
                                  tb: str=None,
                                  botbeat_info: dict=None) -> SupportTicket:

    ticket = SupportTicket.objects.create(
        subject=f'Botbeat exception: {exc.__class__.__name__}: {exc}'[:255],
        source=TicketSource.BOTBEAT_EXC,
        table=table,
    )

    save_settings_info(ticket)
    save_traceback(ticket, exc, tb)
    save_botbeat_info(ticket, botbeat_info)
    save_botbeat_log(ticket)
    if table:
        save_table_info(ticket, table)
        save_hand_history(ticket, table)
        save_socket_log(ticket, table.path)
        save_tablebeat_log(ticket, table)

    report_ticket(ticket)
    return ticket


def ticket_from_table_report_bug(table: PokerTable,
                                 notes: str,
                                 fontend_log: dict,
                                 reported_by: User=None) -> SupportTicket:

    if reported_by is not None and reported_by.is_anonymous:
        reported_by = None

    notes_summary = notes[:64].replace('\n', ' ')
    ticket = SupportTicket.objects.create(
        subject=f"Table bug report: {notes_summary}..."[:255],
        source=TicketSource.TABLE_REPORT_BUG,
        reported_by=reported_by,
        table=table,
    )

    save_settings_info(ticket)
    save_notes(ticket, notes)
    save_user_info(ticket, reported_by)
    save_table_info(ticket, table)
    save_hand_history(ticket, table)
    save_frontend_log(ticket, fontend_log)
    save_socket_log(ticket, table.path)
    save_tablebeat_log(ticket, table)
    save_botbeat_log(ticket)
    report_ticket(ticket)
    
    return ticket



def ticket_from_support_page(subject: str, message: str, reported_by: User=None):
    if reported_by is not None and reported_by.is_anonymous:
        reported_by = None

    ticket = SupportTicket.objects.create(
        subject=f'Support page request: {subject}'[:255],
        source=TicketSource.SUPPORT_PAGE,
        reported_by=reported_by,
    )

    save_settings_info(ticket)
    save_notes(ticket, f'Subject: {subject}\nMessage: {message}')
    save_user_info(ticket, reported_by)

    report_ticket(ticket)
    return ticket


### Reporting helper functions

def report_ticket(ticket: SupportTicket) -> None:
    """Report a support ticket via all the default reporting methods"""
    try:
        report_to_zulip(ticket)
        report_to_sentry(ticket)
        if not ticket.autogenerated:
            report_to_email(ticket)
    except Exception as e:
        # log exception without blocking critical code execution after this
        logger.exception(
            'Exception while attempting to assemble support ticket',
            extra={
                'ticket_id': ticket.id,
                'exception': f'{e.__class__.__name__}: {e}'    
            },
        )


def report_to_zulip(ticket: SupportTicket) -> None:
    if ticket.autogenerated:
        who = str(ticket.reported_by or 'System')
        message = f'New support ticket {ticket.short_id}: {ticket.subject}\n[Download Artifacts]({ticket.artifacts_zip_url})'
        track_analytics_event.send(who, message, topic='System', stream='support')
    else:
        notes = read_notes(ticket)
        url = f'{settings.DEFAULT_HTTP_PROTOCOL}://{settings.DEFAULT_HOST}'
        ticket_url = f'[{ticket.short_id}]({ticket.admin_url})'
        user_profile = f'[{ticket.reported_by.username}]({url}/user/{ticket.reported_by.username})'

        message = f"""**{ticket.opened.strftime('%Y-%m-%d %H:%M %Z')}**
Ticket ID: {ticket_url} by: {user_profile} ({ticket.reported_by.email})
Table: {f'[{ticket.table.name}]({url}{ticket.table.path})' if ticket.table else '--'}
```quote
{notes}
```
{f'[Download Artifacts]({ticket.artifacts_zip_url})' if ticket.artifacts else '*No artifacts*'}
"""

        topic = f"{ticket.short_id}: {ticket.subject.split(':', 1)[-1].strip()}"
        message_to_zulip_support.send(message, topic)

    save_communication_log(ticket, {
        'type': 'reported-to-zulip',
        'ts': timezone.now(),
        'subject': message,
    })


def report_to_sentry(ticket: SupportTicket) -> None:
    logger.error(ticket.subject, extra={
        'ticket_id': str(ticket.id),
        'ticket_dir': ticket.dir,
        'reported_by': ticket.reported_by,
        'opened': ticket.opened,
        'artifacts': ', '.join(ticket.artifacts),
        'table': ticket.table,
        'table_id': ticket.table_id,
        'user_ticket_url': ticket.user_url,
        'admin_ticket_url': ticket.admin_url,
        'artifacts_zip_url': ticket.artifacts_zip_url,
    })
    save_communication_log(ticket, {
        'type': 'reported-to-sentry',
        'ts': timezone.now(),
        'subject': ticket.subject,
    })


def report_to_email(ticket: SupportTicket) -> None:
    send_support_email.send(str(ticket.id))
    
    # TODO: save *entire* email message verbatim to communication log
    save_communication_log(ticket, {
        'type': 'reported-to-email',
        'ts': timezone.now(),
        'subject': ticket.subject,
        'to_user': ticket.reported_by.email if ticket.reported_by else None,
        'to_admins': settings.SUPPORT_GIVERS,
    })


def send_ticket_reply(ticket: SupportTicket, reply: str) -> None:
    if ticket.reported_by and ticket.reported_by.email:
        send_support_email_reply.send(str(ticket.id), reply)

        save_communication_log(ticket, {
            'type': 'replied-to-email',
            'ts': timezone.now(),
            'replied_message': reply,
        })
        return True
    return False

