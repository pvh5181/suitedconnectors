# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-01-29 21:51
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import suitedconnectors.model_utils
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChatHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ChatLine',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('speaker', models.CharField(max_length=20)),
                ('message', models.CharField(max_length=256)),
                ('chat_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poker.ChatHistory')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HandHistory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('hand_number', models.IntegerField(default=0)),
                ('table_json', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('players_json', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='HandHistoryAction',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('action', models.CharField(choices=[('BET', 'BET'), ('RAISE_TO', 'RAISE_TO'), ('CALL', 'CALL'), ('CHECK', 'CHECK'), ('FOLD', 'FOLD'), ('TIMEOUT_FOLD', 'TIMEOUT_FOLD'), ('BUY', 'BUY'), ('TAKE_SEAT', 'TAKE_SEAT'), ('LEAVE_SEAT', 'LEAVE_SEAT'), ('SIT_IN', 'SIT_IN'), ('SIT_OUT', 'SIT_OUT'), ('SITOUT_AT_BLINDS', 'SITOUT_AT_BLINDS'), ('SET_AUTO_REBUY', 'SET_AUTO_REBUY'), ('SET_LEAVING_TABLE', 'SET_LEAVING_TABLE'), ('REPORT_BUG', 'REPORT_BUG'), ('WAIT_FOR_BLINDS', 'WAIT_FOR_BLINDS')], max_length=64, null=True)),
                ('args', django.contrib.postgres.fields.jsonb.JSONField()),
                ('hand_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poker.HandHistory')),
            ],
        ),
        migrations.CreateModel(
            name='HandHistoryEvent',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('subject_id', models.UUIDField()),
                ('event', models.CharField(choices=[('DEAL', 'DEAL'), ('POST', 'POST'), ('POST_DEAD', 'POST_DEAD'), ('ANTE', 'ANTE'), ('BET', 'BET'), ('RAISE_TO', 'RAISE_TO'), ('CALL', 'CALL'), ('CHECK', 'CHECK'), ('FOLD', 'FOLD'), ('BUY', 'BUY'), ('TAKE_SEAT', 'TAKE_SEAT'), ('LEAVE_SEAT', 'LEAVE_SEAT'), ('SIT_IN', 'SIT_IN'), ('SIT_OUT', 'SIT_OUT'), ('WIN', 'WIN'), ('LOSE', 'LOSE'), ('OWE_SB', 'OWE_SB'), ('OWE_BB', 'OWE_BB'), ('SET_BLIND_POS', 'SET_BLIND_POS'), ('NEW_HAND', 'NEW_HAND'), ('NEW_STREET', 'NEW_STREET'), ('POP_CARDS', 'POP_CARDS'), ('UPDATE_STACK', 'UPDATE_STACK'), ('REPORT_BUG', 'REPORT_BUG'), ('WAIT_FOR_BLINDS', 'WAIT_FOR_BLINDS'), ('SITOUT_AT_BLINDS', 'SITOUT_AT_BLINDS'), ('SET_AUTO_REBUY', 'SET_AUTO_REBUY'), ('CREATE_TRANSFER', 'CREATE_TRANSFER'), ('SET_LEAVING_TABLE', 'SET_LEAVING_TABLE'), ('ADD_ORBIT_SITTING_OUT', 'ADD_ORBIT_SITTING_OUT'), ('END_HAND', 'END_HAND'), ('SET_TIMEBANK', 'SET_TIMEBANK'), ('RECORD_ACTION', 'RECORD_ACTION'), ('CHAT', 'CHAT'), ('ALERT', 'ALERT'), ('SET_BOUNTY_FLAG', 'SET_BOUNTY_FLAG'), ('REVEAL_HAND', 'REVEAL_HAND'), ('DELAY_COUNTDOWN', 'DELAY_COUNTDOWN')], max_length=64, null=True)),
                ('args', django.contrib.postgres.fields.jsonb.JSONField()),
                ('hand_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poker.HandHistory')),
                ('subject_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('stack', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('wagers', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('uncollected_bets', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('dead_money', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('position', models.IntegerField(null=True)),
                ('seated', models.BooleanField(default=False)),
                ('sitting_out', models.NullBooleanField()),
                ('mock_name', models.CharField(blank=True, max_length=64, null=True)),
                ('owes_sb', models.BooleanField(default=False)),
                ('owes_bb', models.BooleanField(default=False)),
                ('auto_rebuy', models.DecimalField(decimal_places=2, max_digits=20, null=True)),
                ('pending_rebuy', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('wait_for_blinds', models.BooleanField(default=False)),
                ('sit_out_at_blinds', models.BooleanField(default=False)),
                ('leaving_table', models.BooleanField(default=False)),
                ('orbits_sitting_out', models.IntegerField(default=0)),
                ('cards_str', models.CharField(blank=True, max_length=256, null=True)),
                ('last_action_int', models.IntegerField(choices=[(1, 'BET'), (2, 'RAISE_TO'), (3, 'CALL'), (4, 'CHECK'), (5, 'FOLD'), (6, 'TIMEOUT_FOLD'), (7, 'BUY'), (8, 'TAKE_SEAT'), (9, 'LEAVE_SEAT'), (10, 'SIT_IN'), (11, 'SIT_OUT'), (12, 'SITOUT_AT_BLINDS'), (13, 'SET_AUTO_REBUY'), (14, 'SET_LEAVING_TABLE'), (15, 'REPORT_BUG'), (16, 'WAIT_FOR_BLINDS')], null=True)),
                ('timebank_remaining', models.IntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            bases=(models.Model, suitedconnectors.model_utils.DispatchHandlerModel),
        ),
        migrations.CreateModel(
            name='PokerTable',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='Homepage Table', max_length=256, unique=True)),
                ('is_mock', models.BooleanField(default=False)),
                ('table_type', models.CharField(choices=[('NLHE', "No Limit Hold 'em"), ('PLO', 'Pot Limit Omaha'), ('FPLO', "Five Card Pot Limit Omaha"),  ('SDNLHE', "No Limit Hold 'em"), ('SDPLO', 'Pot Limit Omaha'), ('BNTY', 'No Limit Bounty')], default='NLHE', max_length=10)),
                ('ante', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True)),
                ('min_buyin', models.DecimalField(decimal_places=2, default=100, max_digits=20)),
                ('max_buyin', models.DecimalField(decimal_places=2, default=400, max_digits=20)),
                ('num_seats', models.IntegerField(default=6)),
                ('sb', models.DecimalField(decimal_places=2, default=1, max_digits=20, null=True)),
                ('bb', models.DecimalField(decimal_places=2, default=2, max_digits=20, null=True)),
                ('btn_idx', models.IntegerField(blank=True, null=True)),
                ('sb_idx', models.IntegerField(blank=True, null=True)),
                ('bb_idx', models.IntegerField(blank=True, null=True)),
                ('deck_str', models.CharField(blank=True, max_length=312, null=True)),
                ('board_str', models.CharField(blank=True, max_length=256, null=True)),
                ('precision', models.IntegerField(default=2)),
                ('hand_number', models.IntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('seconds_per_action_base', models.IntegerField(default=10)),
                ('seconds_per_action_increment', models.IntegerField(default=5)),
                ('min_timebank', models.IntegerField(default=5)),
                ('max_timebank', models.IntegerField(default=60)),
                ('last_action_timestamp', models.DateTimeField(auto_now_add=True)),
                ('bounty_flag', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, suitedconnectors.model_utils.DispatchHandlerModel),
        ),
        migrations.CreateModel(
            name='PokerTournament',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='Tournament', max_length=256)),
                ('game_variant', models.CharField(choices=[('NLHE', "No Limit Hold 'em"), ('PLO', 'Pot Limit Omaha'), ('FPLO', 'Five Card Pot Limit Omaha'), ('SDNLHE', "No Limit Hold 'em"), ('SDPLO', 'Pot Limit Omaha'), ('BNTY', 'No Limit Bounty')], default='NLHE', max_length=10)),
                ('buyin_amt', models.DecimalField(decimal_places=2, max_digits=20)),
                ('start_time', models.DateTimeField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SideEffectSubject',
            fields=[
                ('id', models.UUIDField(default='11111111111111111111111111111111', editable=False, primary_key=True, serialize=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TournamentResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('placement', models.IntegerField()),
                ('payout_amt', models.DecimalField(decimal_places=2, max_digits=20)),
            ],
        ),
        migrations.CreateModel(
            name='Freezeout',
            fields=[
                ('pokertournament_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='poker.PokerTournament')),
                ('max_entrants', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
            bases=('poker.pokertournament',),
        ),
        migrations.CreateModel(
            name='MockPlayer',
            fields=[
                ('player_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='poker.Player')),
            ],
            options={
                'abstract': False,
            },
            bases=('poker.player',),
        ),
        migrations.CreateModel(
            name='MockPokerTable',
            fields=[
                ('pokertable_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='poker.PokerTable')),
            ],
            options={
                'abstract': False,
            },
            bases=('poker.pokertable',),
        ),
        migrations.AddField(
            model_name='tournamentresult',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poker.PokerTournament'),
        ),
        migrations.AddField(
            model_name='tournamentresult',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='pokertournament',
            name='entrants',
            field=models.ManyToManyField(related_name='entrant_users', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='pokertable',
            name='chat_history',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='poker.ChatHistory'),
        ),
        migrations.AddField(
            model_name='pokertable',
            name='tournament',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='poker.PokerTournament'),
        ),
        migrations.AddField(
            model_name='player',
            name='table',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poker.PokerTable'),
        ),
        migrations.AddField(
            model_name='player',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='handhistoryaction',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poker.Player'),
        ),
        migrations.AddField(
            model_name='handhistory',
            name='table',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poker.PokerTable'),
        ),
        migrations.AlterUniqueTogether(
            name='player',
            unique_together=set([('table', 'user')]),
        ),
    ]
