# Generated by Django 2.0.8 on 2019-01-17 04:45

from django.db import migrations
from django.db.models import Q
from django.conf import settings

from poker.constants import SEASONS

def earned_chips_peak(apps, user_id, season) -> float:
    User = apps.get_model('suitedconnectors', 'User')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    user_type = ContentType.objects.get_for_model(User)
    user_transfers = Q(source_id=user_id) & Q(dest_type=user_type)\
                   | Q(source_type=user_type) & Q(dest_id=user_id)

    season_start, season_end = SEASONS[season]
    season_filter = {
        f'timestamp__gte': season_start,
        f'timestamp__lt': season_end
    }

    BalanceTransfer = apps.get_model('banker', 'BalanceTransfer')
    transfers = BalanceTransfer.objects.filter(
        Q(source_id=user_id) | Q(dest_id=user_id),
        **season_filter,
    ).exclude(
        user_transfers
    ).order_by('timestamp')

    total = 0
    peak = 0
    for transfer in transfers:
        if transfer.dest_id == user_id:
            total += transfer.amt
        else:
            total -= transfer.amt
        if total < 0:
            total = 0
        if total > peak:
            peak = total

    return peak

def create_games_level(apps, schema_editor):
    """Method to create games level for existing users"""
    User = apps.get_model('suitedconnectors', 'User')
    UserStats = apps.get_model('suitedconnectors', 'UserStats')

    for user in User.objects.all().only('is_robot'):
        if not user.is_robot:
            for season in range(settings.CURRENT_SEASON + 1):
                userstats, _ = UserStats.objects.get_or_create(
                    user=user,
                    season=season
                )
                userstats.games_level = earned_chips_peak(apps, user.id, season)
                userstats.save()


class Migration(migrations.Migration):

    dependencies = [
        ('suitedconnectors', '0039_auto_20190117_0058'),
    ]

    operations = [
        migrations.RunPython(create_games_level),
    ]
